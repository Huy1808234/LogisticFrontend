import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
} from "chart.js";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { Link } from "react-router-dom";
import Layout from "../layouts/Layout";

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn bi·ªÉu ƒë·ªì c·∫ßn thi·∫øt t·ª´ Chart.js
ChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);

// ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i ƒë∆°n h√†ng c√≥ s·∫µn
const ORDER_STATUSES = [
  "M·ªõi t·∫°o",
  "ƒêang giao",
  "Ho√†n th√†nh",
  "Th·∫•t b·∫°i",
  "ƒê√£ hu·ª∑",
];

const Profile: React.FC = () => {
  // State ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ƒë∆°n h√†ng
  const [orders, setOrders] = useState<any[]>([]);
  // State ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i l·ªçc (vd: "T·∫•t c·∫£", "M·ªõi t·∫°o",...)
  const [filterStatus, setFilterStatus] = useState("T·∫•t c·∫£");
  // State ƒë·ªÉ l∆∞u tr·ªØ chu·ªói t√¨m ki·∫øm c·ªßa ng∆∞·ªùi d√πng
  const [searchQuery, setSearchQuery] = useState("");
  // State cho trang hi·ªán t·∫°i c·ªßa ph√¢n trang
  const [currentPage, setCurrentPage] = useState(1);
  // S·ªë l∆∞·ª£ng m·ª•c hi·ªÉn th·ªã tr√™n m·ªói trang
  const itemsPerPage = 5;
  // State ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [loading, setLoading] = useState(false);

  // useEffect ƒë·ªÉ t·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const fetchOrders = async () => {
      setLoading(true); // B·∫Øt ƒë·∫ßu t·∫£i, ƒë·∫∑t loading l√† true
      try {
        const res = await axios.get("http://localhost:3001/api/orders/history");
        setOrders(res.data); // C·∫≠p nh·∫≠t state orders v·ªõi d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
      } catch (err) {
        console.error("L·ªói khi t·∫£i ƒë∆°n h√†ng:", err); // Ghi log l·ªói n·∫øu c√≥
      }
      setLoading(false); // K·∫øt th√∫c t·∫£i, ƒë·∫∑t loading l√† false
    };
    fetchOrders(); // G·ªçi h√†m t·∫£i ƒë∆°n h√†ng
  }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o useEffect ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  // useMemo ƒë·ªÉ t√≠nh to√°n danh s√°ch ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l·ªçc v√† t√¨m ki·∫øm
  const displayedOrders = useMemo(() => {
    let result = orders; // B·∫Øt ƒë·∫ßu v·ªõi t·∫•t c·∫£ ƒë∆°n h√†ng

    // √Åp d·ª•ng b·ªô l·ªçc tr·∫°ng th√°i n·∫øu kh√¥ng ph·∫£i l√† "T·∫•t c·∫£"
    if (filterStatus !== "T·∫•t c·∫£") {
      result = result.filter(
        (o) =>
          o.Order_status?.trim().toLowerCase() ===
          filterStatus.trim().toLowerCase()
      );
    }

    // √Åp d·ª•ng t√¨m ki·∫øm n·∫øu c√≥ searchQuery
    if (searchQuery) {
      result = result.filter(
        (o) =>
          o.Order_code?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          o.receiverName?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    return result; // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l·ªçc v√† t√¨m ki·∫øm
  }, [orders, filterStatus, searchQuery]); // Ph·ª• thu·ªôc v√†o orders, filterStatus, v√† searchQuery

  // useEffect ƒë·ªÉ ƒë·∫∑t l·∫°i trang hi·ªán t·∫°i v·ªÅ 1 m·ªói khi b·ªô l·ªçc ho·∫∑c t√¨m ki·∫øm thay ƒë·ªïi
  useEffect(() => {
    setCurrentPage(1);
  }, [filterStatus, searchQuery]);

  // T√≠nh to√°n t·ªïng s·ªë trang d·ª±a tr√™n displayedOrders
  const totalPages = Math.ceil(displayedOrders.length / itemsPerPage);

  // useMemo ƒë·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng cho trang hi·ªán t·∫°i (ƒë√£ ph√¢n trang)
  const currentOrders = useMemo(() => {
    const start = (currentPage - 1) * itemsPerPage; // V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa c√°c m·ª•c tr√™n trang
    return displayedOrders.slice(start, start + itemsPerPage); // C·∫Øt m·∫£ng ƒë·ªÉ l·∫•y c√°c m·ª•c c·ªßa trang hi·ªán t·∫°i
  }, [displayedOrders, currentPage]); // Ph·ª• thu·ªôc v√†o displayedOrders v√† currentPage

  // useMemo ƒë·ªÉ t√≠nh to√°n s·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo t·ª´ng tr·∫°ng th√°i cho bi·ªÉu ƒë·ªì
  const statusCounts = useMemo(() => {
    const counts: Record<string, number> = {};
    ORDER_STATUSES.forEach((status) => (counts[status] = 0)); // Kh·ªüi t·∫°o t·∫•t c·∫£ s·ªë l∆∞·ª£ng l√† 0
    orders.forEach((order) => {
      const cleanStatus = order.Order_status?.trim(); // L·∫•y tr·∫°ng th√°i v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
      if (counts.hasOwnProperty(cleanStatus)) {
        counts[cleanStatus]++; // TƒÉng s·ªë l∆∞·ª£ng cho tr·∫°ng th√°i t∆∞∆°ng ·ª©ng
      }
    });
    return counts; // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ch·ª©a s·ªë l∆∞·ª£ng t·ª´ng tr·∫°ng th√°i
  }, [orders]); // Ph·ª• thu·ªôc v√†o orders (t√≠nh to√°n d·ª±a tr√™n t·∫•t c·∫£ ƒë∆°n h√†ng, kh√¥ng ph·∫£i ƒë∆°n h√†ng ƒë√£ l·ªçc/t√¨m ki·∫øm)

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì c·ªôt
  const chartData = {
    labels: ORDER_STATUSES, // Nh√£n tr·ª•c X l√† c√°c tr·∫°ng th√°i ƒë∆°n h√†ng
    datasets: [
      {
        label: "S·ªë l∆∞·ª£ng ƒë∆°n", // Nh√£n cho c·ªôt d·ªØ li·ªáu
        data: ORDER_STATUSES.map((status) => statusCounts[status]), // D·ªØ li·ªáu s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng
        backgroundColor: "#f59e0b", // M√†u n·ªÅn c·ªßa c·ªôt
      },
    ],
  };

  // T√πy ch·ªçn c·∫•u h√¨nh cho bi·ªÉu ƒë·ªì
  const chartOptions = {
    responsive: true, // Bi·ªÉu ƒë·ªì s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
    maintainAspectRatio: false, // Kh√¥ng duy tr√¨ t·ª∑ l·ªá khung h√¨nh c·ªë ƒë·ªãnh
    animation: { duration: 0 }, // T·∫Øt ho·∫°t ·∫£nh khi bi·ªÉu ƒë·ªì ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    layout: { padding: { top: 10, bottom: 10 } }, // ƒê·ªám xung quanh bi·ªÉu ƒë·ªì
    plugins: {
      legend: { display: true, position: "top" as const }, // Hi·ªÉn th·ªã ch√∫ gi·∫£i ·ªü tr√™n c√πng
      tooltip: { enabled: true }, // B·∫≠t tooltip khi di chu·ªôt
    },
    scales: {
      y: {
        beginAtZero: true, // Tr·ª•c Y b·∫Øt ƒë·∫ßu t·ª´ 0
        ticks: { stepSize: 1, precision: 0 }, // C√°c v·∫°ch chia tr√™n tr·ª•c Y l√† s·ªë nguy√™n
      },
    },
  };

  // H√†m tr·∫£ v·ªÅ class CSS cho huy hi·ªáu tr·∫°ng th√°i
  const getStatusBadge = (status: string) => {
    const s = status.toLowerCase();
    if (s.includes("ho√†n")) return "badge bg-success"; // Ho√†n th√†nh -> m√†u xanh l√°
    if (s.includes("giao")) return "badge bg-info"; // ƒêang giao -> m√†u xanh d∆∞∆°ng nh·∫°t
    if (s.includes("m·ªõi")) return "badge bg-warning text-dark"; // M·ªõi t·∫°o -> m√†u v√†ng
    if (s.includes("hu·ª∑") || s.includes("th·∫•t")) return "badge bg-danger"; // H·ªßy/Th·∫•t b·∫°i -> m√†u ƒë·ªè
    return "badge bg-secondary"; // M·∫∑c ƒë·ªãnh -> m√†u x√°m
  };

  // H√†m xu·∫•t d·ªØ li·ªáu ra file Excel
  const exportToExcel = () => {
    // T·∫°o worksheet t·ª´ d·ªØ li·ªáu displayedOrders (ƒë∆°n h√†ng ƒëang hi·ªÉn th·ªã)
    const ws = XLSX.utils.json_to_sheet(displayedOrders);
    // T·∫°o workbook m·ªõi
    const wb = XLSX.utils.book_new();
    // Th√™m worksheet v√†o workbook
    XLSX.utils.book_append_sheet(wb, ws, "ƒê∆°n h√†ng");
    // Chuy·ªÉn workbook th√†nh d·∫°ng blob
    const blob = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    // L∆∞u file Excel
    saveAs(new Blob([blob]), "donhang.xlsx");
  };

  return (
    <Layout>
      <div className="container py-5">
        <div className="text-center mb-4">
          <h2 className="fw-bold">Trang c√° nh√¢n</h2>
          <p className="text-muted">T·ªïng quan v√† l·ªãch s·ª≠ ƒë∆°n h√†ng</p>
        </div>

        <div className="row g-4">
          <div className="col-md-6">
            <div className="card shadow p-3" style={{ height: 300 }}>
              <Bar data={chartData} options={chartOptions} />
            </div>
          </div>
          <div className="col-md-6">
            <div className="card bg-warning text-white mb-3 shadow">
              <div className="card-body text-center">
                <h5 className="card-title">T·ªïng s·ªë ƒë∆°n</h5>
                <p className="card-text fs-3 fw-bold">{orders.length}</p>
              </div>
            </div>
            <div className="card shadow p-3 mb-3">
              <label className="form-label">L·ªçc theo tr·∫°ng th√°i:</label>
              <select
                className="form-select"
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
              >
                <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
                {ORDER_STATUSES.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
            <button className="btn btn-success" onClick={exportToExcel}>
              Xu·∫•t Excel
            </button>
          </div>
        </div>

        <hr className="my-5" />
        <h4 className="mb-3">L·ªãch s·ª≠ ƒë∆°n h√†ng</h4>

        <input
          className="form-control mb-3"
          placeholder="üîç T√¨m theo m√£ ƒë∆°n ho·∫∑c ng∆∞·ªùi nh·∫≠n..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />

        {loading ? (
          <div className="text-center py-5">ƒêang t·∫£i d·ªØ li·ªáu...</div>
        ) : (
          <>
            <div className="table-responsive">
              <table className="table table-bordered table-hover">
                <thead className="table-light">
                  <tr>
                    <th>M√£ ƒë∆°n</th>
                    <th>Ng∆∞·ªùi nh·∫≠n</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Ph√≠ ship</th>
                    <th>Ng√†y t·∫°o</th>
                  </tr>
                </thead>
                <tbody>
                  {currentOrders.length === 0 ? (
                    <tr>
                      <td colSpan={5} className="text-center text-muted py-3">
                        Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o.
                      </td>
                    </tr>
                  ) : (
                    currentOrders.map((order, index) => (
                      <tr key={index}>
                        <td className="fw-semibold text-dark">
                          <Link
                            to={`/orders/${order.Order_code}`}
                            style={{ color: "#000", textDecoration: "none" }}
                          >
                            {order.Order_code}
                          </Link>
                        </td>
                        <td>
                          {order.receiverName} ({order.receiverPhone})
                        </td>
                        <td>
                          <span className={getStatusBadge(order.Order_status)}>
                            {order.Order_status}
                          </span>
                        </td>
                        <td>
                          {parseFloat(order.Ship_cost).toLocaleString()} VND
                        </td>
                        <td>
                          {new Date(order.Created_at).toLocaleDateString()}
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
            <div className="d-flex justify-content-between align-items-center mt-3">
              <p className="mb-0">
                Trang {currentOrders.length > 0 ? currentPage : 0} /{" "}
                {totalPages}
              </p>
              <div>
                <button
                  className="btn btn-outline-primary me-2"
                  disabled={currentPage === 1}
                  onClick={() => setCurrentPage((p) => p - 1)}
                >
                  ‚Üê Tr∆∞·ªõc
                </button>
                <button
                  className="btn btn-outline-primary"
                  disabled={currentPage === totalPages || totalPages === 0}
                  onClick={() => setCurrentPage((p) => p + 1)}
                >
                  Ti·∫øp ‚Üí
                </button>
              </div>
            </div>
          </>
        )}
      </div>
    </Layout>
  );
};

export default Profile;
